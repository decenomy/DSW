# FROM decenomy/dsw-linux-x64-builder:latest
FROM decenomy/dsw-linux-x64-builder@sha256:5b4550b5dc7b37e13b1b8b3a01443689dcd391578940068998fa3a137b845b58


# ARG for specifying the number of cores
ARG CPU_CORES=1

# ARG for specifying the coin parameters
ARG TICKER=KYAN
ARG NAME=Kyanite
ARG BASE_NAME=kyanite
ARG TARGET=master

# Clone the repository
RUN if [ ! -d $TICKER ]; then \
  git clone https://github.com/decenomy/$TICKER; \
fi

# Switch to the repository directory
WORKDIR /$TICKER

# Check out a specific version if needed
RUN git checkout -B $TARGET
RUN git pull origin $TARGET

# Run Git commands to extract the timestamps
RUN git log -1 --format="%at" | xargs -I{} date -d @{} "+%Y-%m-%d %H:%M:%S" > /git_timestamp
RUN git log -1 --format="%at" | xargs -I{} date -d @{} "+%Y%m%d%H%M.%S" > /git_timestamp_touch

# Run the configuration script
RUN PATH=${WRAP_DIR}:${PATH} ./autogen.sh && \
    PATH=${WRAP_DIR}:${PATH} ./configure \
        --prefix=/DSW/depends/x86_64-pc-linux-gnu \
        --disable-debug \
        --disable-bench \
        --disable-tests \
        --disable-man \
        --enable-zmq \
        --enable-static \
        --with-gui \
        --enable-glibc-back-compat \
        --enable-upnp-default \
        LDFLAGS="-static-libstdc++"

# Compile the binaries
RUN PATH=${WRAP_DIR}:${PATH} make -j$CPU_CORES HOST=x86_64-pc-linux-gnu

# Extract the wallet version
RUN grep "define(_CLIENT_VERSION_MAJOR" configure.ac | awk -F"[ ,)]" '{print $3}' | tr -d '\n' > /wallet_version
RUN echo -n "." >> /wallet_version
RUN grep "define(_CLIENT_VERSION_MINOR" configure.ac | awk -F"[ ,)]" '{print $3}' | tr -d '\n' >> /wallet_version
RUN echo -n "." >> /wallet_version
RUN grep "define(_CLIENT_VERSION_REVISION" configure.ac | awk -F"[ ,)]" '{print $3}' | tr -d '\n' >> /wallet_version
RUN echo -n "." >> /wallet_version
RUN grep "define(_CLIENT_VERSION_BUILD" configure.ac | awk -F"[ ,)]" '{print $3}' | tr -d '\n' >> /wallet_version

# Create deploy files
RUN mkdir -p deploy/linux-x64
RUN PATH=${WRAP_DIR}:${PATH} strip -s src/$(echo $BASE_NAME)d src/$(echo $BASE_NAME)-cli src/$(echo $BASE_NAME)-tx src/qt/$(echo $BASE_NAME)-qt
RUN cp src/$(echo $BASE_NAME)d src/$(echo $BASE_NAME)-cli src/$(echo $BASE_NAME)-tx src/qt/$(echo $BASE_NAME)-qt /$TICKER/deploy/linux-x64
RUN find /$TICKER/deploy/linux-x64 -type f -exec touch -t $(cat /git_timestamp_touch) {} +
WORKDIR /$TICKER/deploy/linux-x64
RUN PATH=${WRAP_DIR}:${PATH} zip -X $TICKER-$(cat /wallet_version)-Linux-x64.zip $(echo $BASE_NAME)d $(echo $BASE_NAME)-cli $(echo $BASE_NAME)-tx $(echo $BASE_NAME)-qt
RUN echo "$(git rev-parse HEAD) commit hash" >> SHA256SUMS-Linux-x64.ASC
RUN sha256sum $(echo $BASE_NAME)d >> SHA256SUMS-Linux-x64.ASC
RUN sha256sum $(echo $BASE_NAME)-cli >> SHA256SUMS-Linux-x64.ASC
RUN sha256sum $(echo $BASE_NAME)-tx >> SHA256SUMS-Linux-x64.ASC
RUN sha256sum $(echo $BASE_NAME)-qt >> SHA256SUMS-Linux-x64.ASC
RUN sha256sum $TICKER-$(cat /wallet_version)-Linux-x64.zip >> SHA256SUMS-Linux-x64.ASC

# To compile and build the container execute docker in this way:
# docker build \
#   --build-arg CPU_CORES=<num_cores> \
#   --build-arg TICKER=<ticker> \
#   --build-arg NAME=<coin_name> \
#   --build-arg BASE_NAME=<base_name> \
#   --build-arg TARGET=<branch|commit|tag> \
#   -f Dockerfile.dsw-linux-x64-wallet .

# To run the container use:
# docker run -it <image_id>

# Set the entry point if you want to interact within the container
ENTRYPOINT ["bash"]
